<?php

function server_management_twoway_service() {
  return array(
    'server_connect' => array(
      'callback' => 'server_management_service_do_server_connect',
      'service_file' => 'services/server_management.server_connect.inc',
      'description' => 'Requests that services be sent between the servers',
    ),
  );
}

function server_management_secsyn_entity_dependency($entity) {
  $deps = array();
  switch ($entity->entity_type) {
    case 'server':
      if (!empty($entity->parent_sid)) {
        $server = server_management_load($entity->parent_sid);
        $server->entity_type = 'server';
        $deps[] = array(
          'object' => $server,
          'profile' => 'SecureSyndicationEntityProfile',
        );
      }
      break;
    case 'server_config':
      $server = server_management_load($entity->sid);
      $server->entity_type = 'server';
      $deps[] = array(
        'object' => $server,
        'profile' => 'SecureSyndicationEntityProfile',
      );
      break;
  }
  return $deps;
}

function server_management_yamlconfig_handlers() {
  return array(
    'server_config_type' => array(
      'weight' => 500,
    ),
  );
}

function server_management_config_type_delete($type) {
  db_delete('server_management_config_types')
      ->condition('type', $type)
      ->execute();
  field_attach_delete_bundle('server_config', $type);
}

function server_management_secsyn_entity_children($entity) {
  $deps = array();
  switch ($entity->entity_type) {
    case 'server':
      $packets = server_management_config_item_load($entity->sid);
      foreach ($packets as $packet) {
        $packet->entity_type = 'server_config';
        $deps[] = array(
          'object' => $packet,
          'profile' => 'SecureSyndicationEntityProfile',
        );
      }
      break;
  }
  return $deps;
}

function server_management_secsyn_entity_ignore_fields($entity) {
switch ($entity->entity_type) {
    case 'server':
      return array('sid', 'parent_sid');
      break;
    case 'server_config':
      return array('cid', 'sid');
      break;
  }
}

function server_management_secsyn_entity_package_alter(&$package, $object) {
  switch ($object->entity_type) {
    case 'server':
      if (!empty($object->parent_sid)) {
        $parent = server_management_load($object->parent_sid);
        $package->parent_server = $parent->machine_name;
      }
      break;
    case 'server_config':
      $parent = server_management_load($object->sid);
      $package->parent_server = $parent->machine_name;
      break;
  }
}

function server_management_secsyn_entity_presave(&$entity) {
  switch ($entity->entity_type) {
    case 'server':
      if (!empty($entity->parent_server)) {
        $server = server_management_load_by_name($entity->parent_server);
        $entity->parent_sid = $server->sid;
        unset($entity->parent_server);
      }
      break;
    case 'server_config':
      $server = server_management_load_by_name($entity->parent_server);
      $entity->sid = $server->sid;
      unset($entity->parent_server);
      break;
  }
}

function server_management_server_load_by_parent($parent_sid = NULL) {
  $efq = new EntityFieldquery();
  $efq->entityCondition('entity_type', 'server');
  if (empty($parent_sid)) {
    $efq->propertyCondition('parent_sid', 1, '<');
  } else {
    $efq->propertycondition('parent_sid', $parent_sid);
  }
  $results = array();
  $rs = $efq->execute();
  if (empty($rs['server'])) {
    return array();
  }
  foreach (array_keys($rs['server']) as $sid) {
    $results[$sid] = server_management_load($sid);
  }
  return $results;
}

function server_management_delete_server($server) {
  $controller = entity_get_controller('server');
  $controller->delete(array($server->sid));
}

function server_management_delete_config($config) {
  $controller = entity_get_controller('server_config');
  $controller->delete(array($config->cid));
}

function server_management_config_item_load($server_id) {
  $q = db_select('server_management_config', 'smc');
  $q->fields('smc');
  $q->condition('sid', $server_id);
  return $q->execute()->fetchAll();
}

function server_management_config_types() {
  if (!db_table_exists('server_management_config_types')) {
    return array();
  }
  $types = array();
  $results = db_query('SELECT * FROM {server_management_config_types} ORDER BY `label`');
  foreach ($results as $result) {
    $types[$result->type] = $result;
  }
  return $types;
}

function server_management_config_type_name_exists($name) {
  $existing = array_keys(server_management_config_types());
  return in_array($name, $existing);
}

function server_management_entity_info() {
  $bundles = array();
  foreach (server_management_config_types() as $type) {
    $bundles[$type->type] = array(
      'label' => $type->label,
      'admin' => array(
        'path' => 'admin/structure/server_config/manage/%server_management_config_type',
        'real path' => 'admin/structure/server_config/manage/' . $type->type,
        'bundle argument' => 4,
        'access arguments' => array('administer server fields'),
      ),
    );
  }
  return array(
    'server_config' => array(
      'label' => t('Server Configuration'),
      'entity class' => 'Entity',
      'controller class' => 'ServerConfigurationEntityController',
      'base table' => 'server_management_config',
      'load hook' => 'server_management_config_load',
      'access callback' => 'server_management_config_access',
      'bundle_load' => 'server_management_config_type_api_load',
      'bundle_save' => 'server_management_config_type_api_save',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'cid',
        'label' => 'label',
        'bundle' => 'type',
        'custom uuid' => 'uuid',
      ),
      'bundles' => $bundles,
    ),
    'server' => array(
      'label' => t('Server'),
      'entity class' => 'Entity',
      'controller class' => 'ServerEntityController',
      'base table' => 'server_management_servers',
      'load hook' => 'server_management_load',
      'access callback' => 'server_management_access',
      'bundle load' => 'server_management_type_api_load',
      'bundle save' => 'server_management_type_api_save',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'sid',
        'label' => 'label',
        'custom uuid' => 'machine_name',
      ),
      'bundles' => array(
        'server' => array(
          'label' => 'Server',
          'admin' => array(
            'path' => 'admin/structure/servers/manage/server',
            'access arguments' => array('administer server fields'),
          ),
        ),
      ),
    ),
  );
}

function server_management_type_api_load() {
  return (object) array('server' => TRUE);
}

function server_management_type_api_save() {
  return TRUE;
}

function server_management_config_type_api_load($entity_type, $bundle_name) {
  $types = server_management_config_types();
  if (empty($types[$bundle_name])) {
    return FALSE;
  }
  return $types[$bundle_name];
}

function server_management_config_type_api_save($bundle_def) {
  $bundle_def = (array) $bundle_def;
  unset($bundle_def['entity_type']);
  unset($bundle_def['bundle_key']);
  return server_management_config_type_save($bundle_def);
}

function server_management_config_type_save($type) {
  return db_merge('server_management_config_types')
      ->fields((array) $type)
      ->key(array('type' => $type['type']))
      ->execute();
}

function server_management_theme() {
  return array(
    'server' => array(
      'variables' => array(
        'server' => NULL,
        'view_mode' => 'full',
      ),
      'template' => 'server',
    ),
  );
}

function server_management_config_type_load($type) {
  $types = server_management_config_types();
  if (isset($types[$type])) {
    return $type;
  }
  return FALSE;
}

function server_management_menu() {
  $admin_config_common = array(
    'file' => 'server_management.admin.inc',
    'access arguments' => array('manage configuration types and fields'),
  );
  $menu = array();
  $menu['admin/structure/servers'] = array(
    'title' => 'Managed Servers',
    'description' => 'Manage settings for managed servers',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('server_management_server_form'),
    'file' => 'server_management.admin.inc',
    'access arguments' => array('manage server fields'),
  );
  $menu['admin/structure/server_config'] = array(
    'title' => 'Server Configuation Packets',
    'description' => 'Manage the different types of information that we can store about servers',
    'page callback' => 'server_management_config_list_types',
    'type' => MENU_NORMAL_ITEM,
  ) + $admin_config_common;
  $menu['admin/structure/server_config/list'] = array(
    'title' => 'List',
    'weight' => -20,
    'type' =>  MENU_DEFAULT_LOCAL_TASK & MENU_LOCAL_TASK,
  ) + $admin_config_common;
  $menu['admin/structure/server_config/add'] = array(
    'title' => 'Add Configuration Bundle',
    'type' => MENU_LOCAL_ACTION,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('server_management_config_type_form'),
  ) + $admin_config_common;
  $menu['admin/structure/server_config/manage/%server_management_config_type'] = array(
    'title' => 'Edit Configuration Type',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('server_management_config_type_form', 4),
  ) + $admin_config_common;
  $menu['admin/structure/server_config/manage/%server_management_config_type/edit'] = array(
    'title' => 'Edit',
    'type' => MENU_DEFAULT_LOCAL_TASK & MENU_LOCAL_TASK,
    'weight' => -20,
  ) + $admin_config_common;
  return $menu;
}

function server_management_config_load($cid) {
  $controller = entity_get_controller('server_config');
  return reset($controller->load(array($cid)));
}

function server_management_name_exists($machine_name) {
  $server = server_management_load_by_name($machine_name);
  return !empty($server);
}

function server_management_save_server(&$server) {
  $controller = entity_get_controller('server');
  $controller->save($server);
}

function server_management_load($server_id) {
  $controller = entity_get_controller('server');
  return reset($controller->load(array($server_id)));
}

function server_management_load_by_name($server_name) {
  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'server');
  $efq->propertyCondition('machine_name', $server_name);
  $results = $efq->execute();
  if (empty($results)) {
    return FALSE;
  }
  return server_management_load(reset(array_keys($results['server'])));
}

function server_management_permission() {
  return array(
    'manage all sites' => array(
      'title' => t('Manage all sites'),
      'description' => t('Allows user to administer server information for ALL servers.'),
      'restrict access' => TRUE,
    ),
    'manage local site' => array(
      'title' => t('Manage local site'),
      'description' => t('Allows user to administer server information for this server.'),
    ),
    'manage sub-sites' => array(
      'title' => t('Manage sub-sites'),
      'description' => t('Allows user to admininster server information for sub-sites.'),
    ),
    'manage all configuration' => array(
      'title' => t('Manage global configuration'),
      'description' => t('Allows the user to manage configuration information for ALL servers.'),
      'restrict access' => TRUE,
    ),
    'manage local configuration' => array(
      'title' => t('Manage local configuration'),
      'description' => t('Allows the user to manage configuration information for this server.'),
    ),
    'manage sub-site configuration' => array(
      'title' => t('Manage sub-site configuration'),
      'description' => t('Allows the user to manage configuration information for sub-sites.'),
    ),
    'manage configuration of any type' => array(
      'title' => t('Manage configuration of any type'),
      'description' => t('Allows the user to manage configuration information of any sub-type'),
    ),
    'manage server fields' => array(
      'title' => t('Manage Server Entity'),
      'description' => t('Allows the user control over the server fields.'),
      'restrict access' => TRUE,
    ),
    'manage configuration types and fields' => array(
      'title' => t('Manage Configuration Entity'),
      'description' => t('Allows the user to create new config types and manage their fields'),
    ),
  );
}

function server_management_list_access() {
  return user_access('manage all sites') || user_access('manage local site') ||
      user_access('manage sub-sites');
}

function server_management_access($op, $server, $config_type = NULL) {
  if (in_array($op, array('view config', 'add config', 'add config type'))) {
    if (!server_management_config_site_access($server)) {
      return FALSE;
    }
    if ($op == 'add config type') {
      $obj = (object) array('type' => $config_type);
      if (!server_management_config_type_access($obj)) {
        return FALSE;
      }
    }
  }
  if (user_access('manage all sites')) {
    return TRUE;
  }
  $settings = variable_get('server_management_connect');
  if (!empty($settings['machine_name'])) {
    if ($settings['machine_name'] == $server->machine_name) {
      return user_access('manage local site');
    }
    if (user_access('manage sub-sites')) {
      if (!empty($server->parent_sid)) {
        return _server_management_subsite_access_check(
            server_management_load($server->parent_sid),
            $settings['machine_name']);
      }
    }
  }
  return FALSE;
}

function _server_management_subsite_access_check($server, $local_name) {
  if ($server->machine_name == $local_name) {
    return TRUE;
  } elseif (empty($server->parent_sid)) {
    return FALSE;
  } else {
    return _server_management_subsite_access_check(server_management_load($server->parent_sid), $local_name);
  }
}

function server_management_config_access($op, $config) {
  return server_management_config_site_access(server_management_load($config->sid)) &&
      server_management_config_type_access($config);
}

function server_management_config_type_access($config) {
  if (user_access('manage configuration of any type')) {
    return TRUE;
  }
  $perm = 'manage configuration of type ' . $config->type;
  if (user_access($perm)) {
    return TRUE;
  }
}

function server_management_config_site_access($server) {
  if (user_access('manage all configuration')) {
    return TRUE;
  }
  $settings = variable_get('server_management_connect');
  if (!empty($settings['machine_name'])) {
    if ($settings['machine_name'] == $server->machine_name) {
      return user_access('manage local configuration');
    }
    if (user_access('manage sub-site configuration')) {
      if (!empty($server->parent_sid)) {
        return _server_management_subsite_access_check(
            server_management_load($server->parent_sid),
            $settings['machine_name']);
      }
    }
  }
  return FALSE;
}